declare global {
  /**
   * Используется для санитизации любого значения перед записью в DOM. Может быть
   * использовано для реализации политики безопасности разрешенных и запрещенных значений
   * для предотвращения XSS-атак.
   *
   * Один из способов использования этого обработчика - проверка атрибутов и свойств
   * на соответствие списку полей высокого риска и требование, чтобы значения, записываемые
   * в такие поля, были экземплярами безопасного по построению класса. Safe HTML Types от
   * Closure является одной из реализаций этой техники
   * (https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).
   * Полифил TrustedTypes в режиме только API также может быть использован как основа
   * для этой техники (https://github.com/WICG/trusted-types).
   *
   * @param node HTML-узел (обычно либо текстовый узел #text, либо Element),
   *     в который производится запись. Обратите внимание, что это только узел-пример,
   *     запись может производиться в другой экземпляр того же класса узла.
   * @param name Имя атрибута или свойства (например, 'href').
   * @param type Указывает, будет ли запись выполняться в свойство или узел.
   * @return Функция, которая будет санитизировать этот класс записей.
   */
  type SanitizerFactory = (node: Node, name: string, type: "property" | "attribute") => ValueSanitizer

  /**
   * Функция санитизации значения, которые будут записаны в определенный тип DOM-приемника.
   * См. SanitizerFactory.
   * @param value Значение для санитизации. Будет фактическим значением, переданным в литерал шаблона @pkg/html, поэтому может быть любого типа.
   * @return Значение для записи в DOM. Обычно совпадает с входным значением, если только не требуется санитизация.
   */
  type ValueSanitizer = (value: unknown) => unknown

  // https://tc39.github.io/ecma262/#sec-typeof-operator
  type Primitive = null | undefined | boolean | number | string | symbol | bigint

  /**
   * Интерпретирует литерал шаблона как HTML-шаблон, который может эффективно отрисовываться и обновлять контейнер.
   *
   * ```ts
   * const header = (title: string) => html`<h1>${title}</h1>`;
   * ```
   *
   * Тег `html` возвращает описание DOM для отрисовки в виде значения. Он является
   * ленивым, то есть никакая работа не выполняется до момента рендеринга шаблона. При рендеринге,
   * если шаблон происходит из того же выражения, что и ранее отрисованный результат,
   * он эффективно обновляется вместо полной замены.
   *
   * @returns {(strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult<1>}
   */
  export type HTML = (strings: TemplateStringsArray, ...values: unknown[]) => TemplateResult<1>
}
export {}
